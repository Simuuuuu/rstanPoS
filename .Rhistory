quantile(sequence_theta,0.95))
obs_kappa <- data.frame(median(sequence_kappa), quantile(sequence_kappa,0.05),
quantile(sequence_kappa,0.95))
prob <- list()
pred_theta <- c()
pred_kappa <- c()
success <- c()
d <- 100
discrete <- 0
n.cores <- 7
obs_theta
obs_kappa
cl <- parallel::makeCluster(n.cores)
doParallel::registerDoParallel(cl)
result <- foreach (r=1:d) %doPar% {
#ensures random gamma j is taken
random_index <- sample(x=length(sequence_theta), size=1)
#gives us the a,e,x,closs,z,y,delta for gammaj
prediction <- prediction_samples(dataSurv,n,n1,output_looktime$m1,tau,omega2,
sequence_kappa[random_index],
sequence_theta[random_index],k)
#combines observed and predicted data for each gamma j
output_studyend  <- data_studyend(dataSurv,prediction, tau, k,till,to,to2)
#the list for rstan model
if(discrete == 0) {
survivaldata_studyend  <- list("ncens"=output_studyend$ncens,
"nevent"=output_studyend$nevent,
"y_studyend"=
as.array(output_studyend$y_studyend),
"z_studyend" =
as.array(output_studyend$z_studyend),"mu" = mu,
"sigma" = sigma, "a" = a, "b" = b)
}
else{survivaldata_studyend  <- list("ncens"=output_studyend$ncens,
"nevent"=output_studyend$nevent,
"y_studyend"=
as.array(output_studyend$y_studyend_round),
"z_studyend" =
as.array(output_studyend$z_studyend_round),"mu" = mu,
"sigma" = sigma, "a" = a, "b" = b)
}
#Estimation predictive posterior distribution
samples_studyend  <- rstan::sampling(survivalmodel_studyend,
data = survivaldata_studyend,
iter = 10000, chains = 4, cores = 6,
control = list(adapt_delta = 0.999))
#Extract Parameter Values
sequence_theta2 <- rstan::extract(samples_studyend,'theta')$theta
sequence_kappa2 <- rstan::extract(samples_studyend,'kappa')$kappa
#Get the quantile with which the 12months Posterior is reached -->Prob.
p0_calc <- 1 - pweibull(tau, shape = sequence_kappa2, scale = sequence_theta2)
pred_theta <- c(median(sequence_theta2))
pred_kappa <- c(median(sequence_kappa2))
#for each of the d predictions for a specific gammaj we look if the gamma
#j is greather than the gamma under the Alternative
prob <- length(which(p0_calc > p0)) /
length(sequence_theta2)
if (prob > eta_star) {success <- 1} else {success <- 0}
return(cbind(success,pred_theta,pred_kappa))
}
stopCluster(cl)
cl <- parallel::makeCluster(n.cores)
doParallel::registerDoParallel(cl)
result <- foreach (r=1:d) %dopar% {
#ensures random gamma j is taken
random_index <- sample(x=length(sequence_theta), size=1)
#gives us the a,e,x,closs,z,y,delta for gammaj
prediction <- prediction_samples(dataSurv,n,n1,output_looktime$m1,tau,omega2,
sequence_kappa[random_index],
sequence_theta[random_index],k)
#combines observed and predicted data for each gamma j
output_studyend  <- data_studyend(dataSurv,prediction, tau, k,till,to,to2)
#the list for rstan model
if(discrete == 0) {
survivaldata_studyend  <- list("ncens"=output_studyend$ncens,
"nevent"=output_studyend$nevent,
"y_studyend"=
as.array(output_studyend$y_studyend),
"z_studyend" =
as.array(output_studyend$z_studyend),"mu" = mu,
"sigma" = sigma, "a" = a, "b" = b)
}
else{survivaldata_studyend  <- list("ncens"=output_studyend$ncens,
"nevent"=output_studyend$nevent,
"y_studyend"=
as.array(output_studyend$y_studyend_round),
"z_studyend" =
as.array(output_studyend$z_studyend_round),"mu" = mu,
"sigma" = sigma, "a" = a, "b" = b)
}
#Estimation predictive posterior distribution
samples_studyend  <- rstan::sampling(survivalmodel_studyend,
data = survivaldata_studyend,
iter = 10000, chains = 4, cores = 6,
control = list(adapt_delta = 0.999))
#Extract Parameter Values
sequence_theta2 <- rstan::extract(samples_studyend,'theta')$theta
sequence_kappa2 <- rstan::extract(samples_studyend,'kappa')$kappa
#Get the quantile with which the 12months Posterior is reached -->Prob.
p0_calc <- 1 - pweibull(tau, shape = sequence_kappa2, scale = sequence_theta2)
pred_theta <- c(median(sequence_theta2))
pred_kappa <- c(median(sequence_kappa2))
#for each of the d predictions for a specific gammaj we look if the gamma
#j is greather than the gamma under the Alternative
prob <- length(which(p0_calc > p0)) /
length(sequence_theta2)
if (prob > eta_star) {success <- 1} else {success <- 0}
return(cbind(success,pred_theta,pred_kappa))
}
stopCluster(cl)
n <- 43
cl <- parallel::makeCluster(n.cores)
doParallel::registerDoParallel(cl)
result <- foreach (r=1:d) %dopar% {
#ensures random gamma j is taken
random_index <- sample(x=length(sequence_theta), size=1)
#gives us the a,e,x,closs,z,y,delta for gammaj
prediction <- prediction_samples(dataSurv,n,n1,output_looktime$m1,tau,omega2,
sequence_kappa[random_index],
sequence_theta[random_index],k)
#combines observed and predicted data for each gamma j
output_studyend  <- data_studyend(dataSurv,prediction, tau, k,till,to,to2)
#the list for rstan model
if(discrete == 0) {
survivaldata_studyend  <- list("ncens"=output_studyend$ncens,
"nevent"=output_studyend$nevent,
"y_studyend"=
as.array(output_studyend$y_studyend),
"z_studyend" =
as.array(output_studyend$z_studyend),"mu" = mu,
"sigma" = sigma, "a" = a, "b" = b)
}
else{survivaldata_studyend  <- list("ncens"=output_studyend$ncens,
"nevent"=output_studyend$nevent,
"y_studyend"=
as.array(output_studyend$y_studyend_round),
"z_studyend" =
as.array(output_studyend$z_studyend_round),"mu" = mu,
"sigma" = sigma, "a" = a, "b" = b)
}
#Estimation predictive posterior distribution
samples_studyend  <- rstan::sampling(survivalmodel_studyend,
data = survivaldata_studyend,
iter = 10000, chains = 4, cores = 6,
control = list(adapt_delta = 0.999))
#Extract Parameter Values
sequence_theta2 <- rstan::extract(samples_studyend,'theta')$theta
sequence_kappa2 <- rstan::extract(samples_studyend,'kappa')$kappa
#Get the quantile with which the 12months Posterior is reached -->Prob.
p0_calc <- 1 - pweibull(tau, shape = sequence_kappa2, scale = sequence_theta2)
pred_theta <- c(median(sequence_theta2))
pred_kappa <- c(median(sequence_kappa2))
#for each of the d predictions for a specific gammaj we look if the gamma
#j is greather than the gamma under the Alternative
prob <- length(which(p0_calc > p0)) /
length(sequence_theta2)
if (prob > eta_star) {success <- 1} else {success <- 0}
return(cbind(success,pred_theta,pred_kappa))
}
stopCluster(cl)
omega2 <- 12
p0 <- 0.127
result <- foreach (r=1:d) %dopar% {
#ensures random gamma j is taken
random_index <- sample(x=length(sequence_theta), size=1)
#gives us the a,e,x,closs,z,y,delta for gammaj
prediction <- prediction_samples(dataSurv,n,n1,output_looktime$m1,tau,omega2,
sequence_kappa[random_index],
sequence_theta[random_index],k)
#combines observed and predicted data for each gamma j
output_studyend  <- data_studyend(dataSurv,prediction, tau, k,till,to,to2)
#the list for rstan model
if(discrete == 0) {
survivaldata_studyend  <- list("ncens"=output_studyend$ncens,
"nevent"=output_studyend$nevent,
"y_studyend"=
as.array(output_studyend$y_studyend),
"z_studyend" =
as.array(output_studyend$z_studyend),"mu" = mu,
"sigma" = sigma, "a" = a, "b" = b)
}
else{survivaldata_studyend  <- list("ncens"=output_studyend$ncens,
"nevent"=output_studyend$nevent,
"y_studyend"=
as.array(output_studyend$y_studyend_round),
"z_studyend" =
as.array(output_studyend$z_studyend_round),"mu" = mu,
"sigma" = sigma, "a" = a, "b" = b)
}
#Estimation predictive posterior distribution
samples_studyend  <- rstan::sampling(survivalmodel_studyend,
data = survivaldata_studyend,
iter = 10000, chains = 4, cores = 6,
control = list(adapt_delta = 0.999))
#Extract Parameter Values
sequence_theta2 <- rstan::extract(samples_studyend,'theta')$theta
sequence_kappa2 <- rstan::extract(samples_studyend,'kappa')$kappa
#Get the quantile with which the 12months Posterior is reached -->Prob.
p0_calc <- 1 - pweibull(tau, shape = sequence_kappa2, scale = sequence_theta2)
pred_theta <- c(median(sequence_theta2))
pred_kappa <- c(median(sequence_kappa2))
#for each of the d predictions for a specific gammaj we look if the gamma
#j is greather than the gamma under the Alternative
prob <- length(which(p0_calc > p0)) /
length(sequence_theta2)
if (prob > eta_star) {success <- 1} else {success <- 0}
return(cbind(success,pred_theta,pred_kappa))
}
stopCluster(cl)
cl <- parallel::makeCluster(n.cores)
doParallel::registerDoParallel(cl)
result <- foreach (r=1:d) %dopar% {
#ensures random gamma j is taken
random_index <- sample(x=length(sequence_theta), size=1)
#gives us the a,e,x,closs,z,y,delta for gammaj
prediction <- prediction_samples(dataSurv,n,n1,output_looktime$m1,tau,omega2,
sequence_kappa[random_index],
sequence_theta[random_index],k)
#combines observed and predicted data for each gamma j
output_studyend  <- data_studyend(dataSurv,prediction, tau, k,till,to,to2)
#the list for rstan model
if(discrete == 0) {
survivaldata_studyend  <- list("ncens"=output_studyend$ncens,
"nevent"=output_studyend$nevent,
"y_studyend"=
as.array(output_studyend$y_studyend),
"z_studyend" =
as.array(output_studyend$z_studyend),"mu" = mu,
"sigma" = sigma, "a" = a, "b" = b)
}
else{survivaldata_studyend  <- list("ncens"=output_studyend$ncens,
"nevent"=output_studyend$nevent,
"y_studyend"=
as.array(output_studyend$y_studyend_round),
"z_studyend" =
as.array(output_studyend$z_studyend_round),"mu" = mu,
"sigma" = sigma, "a" = a, "b" = b)
}
#Estimation predictive posterior distribution
samples_studyend  <- rstan::sampling(survivalmodel_studyend,
data = survivaldata_studyend,
iter = 10000, chains = 4, cores = 6,
control = list(adapt_delta = 0.999))
#Extract Parameter Values
sequence_theta2 <- rstan::extract(samples_studyend,'theta')$theta
sequence_kappa2 <- rstan::extract(samples_studyend,'kappa')$kappa
#Get the quantile with which the 12months Posterior is reached -->Prob.
p0_calc <- 1 - pweibull(tau, shape = sequence_kappa2, scale = sequence_theta2)
pred_theta <- c(median(sequence_theta2))
pred_kappa <- c(median(sequence_kappa2))
#for each of the d predictions for a specific gammaj we look if the gamma
#j is greather than the gamma under the Alternative
prob <- length(which(p0_calc > p0)) /
length(sequence_theta2)
if (prob > eta_star) {success <- 1} else {success <- 0}
return(cbind(success,pred_theta,pred_kappa))
}
eta_star <- 0.95
cl <- parallel::makeCluster(n.cores)
doParallel::registerDoParallel(cl)
result <- foreach (r=1:d) %dopar% {
#ensures random gamma j is taken
random_index <- sample(x=length(sequence_theta), size=1)
#gives us the a,e,x,closs,z,y,delta for gammaj
prediction <- prediction_samples(dataSurv,n,n1,output_looktime$m1,tau,omega2,
sequence_kappa[random_index],
sequence_theta[random_index],k)
#combines observed and predicted data for each gamma j
output_studyend  <- data_studyend(dataSurv,prediction, tau, k,till,to,to2)
#the list for rstan model
if(discrete == 0) {
survivaldata_studyend  <- list("ncens"=output_studyend$ncens,
"nevent"=output_studyend$nevent,
"y_studyend"=
as.array(output_studyend$y_studyend),
"z_studyend" =
as.array(output_studyend$z_studyend),"mu" = mu,
"sigma" = sigma, "a" = a, "b" = b)
}
else{survivaldata_studyend  <- list("ncens"=output_studyend$ncens,
"nevent"=output_studyend$nevent,
"y_studyend"=
as.array(output_studyend$y_studyend_round),
"z_studyend" =
as.array(output_studyend$z_studyend_round),"mu" = mu,
"sigma" = sigma, "a" = a, "b" = b)
}
#Estimation predictive posterior distribution
samples_studyend  <- rstan::sampling(survivalmodel_studyend,
data = survivaldata_studyend,
iter = 10000, chains = 4, cores = 6,
control = list(adapt_delta = 0.999))
#Extract Parameter Values
sequence_theta2 <- rstan::extract(samples_studyend,'theta')$theta
sequence_kappa2 <- rstan::extract(samples_studyend,'kappa')$kappa
#Get the quantile with which the 12months Posterior is reached -->Prob.
p0_calc <- 1 - pweibull(tau, shape = sequence_kappa2, scale = sequence_theta2)
pred_theta <- c(median(sequence_theta2))
pred_kappa <- c(median(sequence_kappa2))
#for each of the d predictions for a specific gammaj we look if the gamma
#j is greather than the gamma under the Alternative
prob <- length(which(p0_calc > p0)) /
length(sequence_theta2)
if (prob > eta_star) {success <- 1} else {success <- 0}
return(cbind(success,pred_theta,pred_kappa))
}
result
result[[1]]
result$success
stopCluster(cl)
cl <- parallel::makeCluster(n.cores)
doParallel::registerDoParallel(cl)
result <- foreach (r=1:d, .combine = rbind) %dopar% {
#ensures random gamma j is taken
random_index <- sample(x=length(sequence_theta), size=1)
#gives us the a,e,x,closs,z,y,delta for gammaj
prediction <- prediction_samples(dataSurv,n,n1,output_looktime$m1,tau,omega2,
sequence_kappa[random_index],
sequence_theta[random_index],k)
#combines observed and predicted data for each gamma j
output_studyend  <- data_studyend(dataSurv,prediction, tau, k,till,to,to2)
#the list for rstan model
if(discrete == 0) {
survivaldata_studyend  <- list("ncens"=output_studyend$ncens,
"nevent"=output_studyend$nevent,
"y_studyend"=
as.array(output_studyend$y_studyend),
"z_studyend" =
as.array(output_studyend$z_studyend),"mu" = mu,
"sigma" = sigma, "a" = a, "b" = b)
}
else{survivaldata_studyend  <- list("ncens"=output_studyend$ncens,
"nevent"=output_studyend$nevent,
"y_studyend"=
as.array(output_studyend$y_studyend_round),
"z_studyend" =
as.array(output_studyend$z_studyend_round),"mu" = mu,
"sigma" = sigma, "a" = a, "b" = b)
}
#Estimation predictive posterior distribution
samples_studyend  <- rstan::sampling(survivalmodel_studyend,
data = survivaldata_studyend,
iter = 10000, chains = 4, cores = 6,
control = list(adapt_delta = 0.999))
#Extract Parameter Values
sequence_theta2 <- rstan::extract(samples_studyend,'theta')$theta
sequence_kappa2 <- rstan::extract(samples_studyend,'kappa')$kappa
#Get the quantile with which the 12months Posterior is reached -->Prob.
p0_calc <- 1 - pweibull(tau, shape = sequence_kappa2, scale = sequence_theta2)
pred_theta <- c(median(sequence_theta2))
pred_kappa <- c(median(sequence_kappa2))
#for each of the d predictions for a specific gammaj we look if the gamma
#j is greather than the gamma under the Alternative
prob <- length(which(p0_calc > p0)) /
length(sequence_theta2)
if (prob > eta_star) {success <- 1} else {success <- 0}
return(data.frame("success" = success, "pred_theta" = pred_theta, "pred_kappa"=pred_kappa))
}
result
stopCluster(cl)
all_pred_theta <- data.frame(median(result$pred_theta),
quantile(result$pred_theta,0.05),
quantile(result$pred_theta,0.95))
all_pred_kappa <- data.frame(median(result$pred_kappa),
quantile(result$pred_kappa,0.05),
quantile(result$pred_kappa,0.95))
all_pred_theta
all_pred_kappa
PoS <- sum(result$success)/d
PoS
library(rstanPoS)
library(rstanPoS)
library(parallel)
detectCores()
interim(n.cores = 3, rddata = 0, discrete = 1, data = data ,n = 43,n1 = 12,p0 = 0.127,p2_0 = 0.4,k = 4,tau = 9,omega1 = 24,omega2 = 19,kappa = 1.001144,theta = 4.36499,d = 10,eta_star = 0.95,lambda = 0.10,mu = 0,sigma = 10,a=1,b = 0.001, till = 6, to = 2, to2 = 3)
interim(n.cores = 3, rddata = 0, discrete = 1, data = data ,n = 43,n1 = 12,p0 = 0.127,p2_0 = 0.4,k = 4,tau = 9,omega1 = 24,omega2 = 19,kappa = 1.001144,theta = 4.36499,d = 10,eta_star = 0.95,lambda = 0.10,mu = 0,sigma = 10,a=1,b = 0.001, till = 6, to = 2, to2 = 3)
n1 <- 19
n <- 43
tau <- 9
omega1 <- 9.5
omega2 <- 12
p0 <- 0.127
k <- 2
kappa <- 1.5
theta <- 6.5
till <- 6
to <- 2
to2 <- 3
mu <- 0
sigma <- 0.05
a <- 1
b <- 2
d <- 100
eta_star <- 0.95
discrete <- 0
n.cores <- 7
n.cores <- 4
d <- 10
eta_star <- 0.95
discrete <- 0
n.cores <- 3
smodel_looktime <- "data {
int<lower=0> m1; //number of active patients at interim from first stage
int<lower=0> n1event; //number of patients with event out of n1-m1
real mu; //prior mu for theta
real<lower=0> sigma;//prior sd for theta
real<lower=0> a; //prior a for kappa
real<lower=0> b; //prior b for kappa
vector[n1event] y_looktime; //time till event at looktime
vector[m1] z_looktime; //censored b/c no event until looktime
}
parameters {
real<lower=0> theta; //scale parameter to estimate
real<lower=0> kappa; //shape parameter to estimate
}
model{
target += weibull_lpdf(y_looktime | kappa, theta);
target += weibull_lccdf(z_looktime | kappa, theta);
theta ~ lognormal(mu, sigma); //prior for theta, Reference Ibrahim
kappa ~ gamma(a, b); //prior for kappa, Reference Ibrahim
}
"
library(rstan)
library(doParallel)
survivalmodel_looktime <- stan_model(model_code=smodel_looktime)
smodel_studyend <- "data {
int<lower=0> nevent; // number of events at study end
int<lower=0> ncens; // number of aC at study end
real mu; //prior mu for theta
real<lower=0> sigma;//prior sd for theta
real<lower=0> a; //prior a for kappa
real<lower=0> b; //prior b for kappa
vector[nevent] y_studyend; //time till event at looktime
vector[ncens] z_studyend; //aC time
}
parameters {
real<lower=0> theta; //scale parameter to estimate
real<lower=0> kappa; //shape parameter to estimate
}
model{
target += weibull_lpdf(y_studyend | kappa, theta);
target += weibull_lccdf(z_studyend | kappa, theta);
theta ~ lognormal(mu, sigma); //prior for theta, Reference Ibrahim
kappa ~ gamma(a, b); //prior for kappa, Reference Ibrahim
}"
survivalmodel_studyend <- stan_model(model_code=smodel_studyend)
rdata <- 1
PoS <- c()
decision <- c()
if(rddata == 1) {
#Data generated
dataSurv <- rdsamples_generator(n1,tau,k,omega1,kappa,theta)
}
else{dataSurv <- data
kappa <- find_weibull(tau, p0, k,
p2_0)$Shape
theta <- find_weibull(tau, p0, k,
p2_0)$Scale
}
dataSurv <- rdsamples_generator(n1,tau,k,omega1,kappa,theta)
output_looktime <- data_looktime(dataSurv,k,till,to,to2)
survivaldata_looktime <- list("n1" = n1, "m1"=output_looktime$m1,
"n1event"=output_looktime$n1event,
"y_looktime"=
as.array(output_looktime$y_looktime),
"z_looktime" =
as.array(output_looktime$z_looktime), "mu" = mu,
"sigma" = sigma, "a" = a, "b" = b)
samples_looktime <- rstan::sampling(survivalmodel_looktime,
data = survivaldata_looktime,
iter = 10000, chains = 4, cores = 6,
control = list(adapt_delta = 0.999))
interim(n.cores = 3, rddata = 0, discrete = 1, data = data ,n = 43,n1 = 12,p0 = 0.127,p2_0 = 0.4,k = 4,tau = 9,omega1 = 24,omega2 = 19,kappa = 1.001144,theta = 4.36499,d = 10,eta_star = 0.95,lambda = 0.10,mu = 0,sigma = 10,a=1,b = 0.001, till = 6, to = 2, to2 = 3)
interim(rddata = 1,discrete = 1,data = 0,n = 43,n1 = 24,p0 = 0.127,p2_0 = 0.4,k = 4,tau = 9,omega1 = 24,omega2 = 19,kappa = 1.001144,theta = 4.36499,d = 100,eta_star = 0.95,lambda = 0.10,mu = 0,sigma = 10,a=1,b = 0.001, till = 6, to = 2, to2 = 3)
interim(n.cores = 3,rddata = 1,discrete = 1,data = 0,n = 43,n1 = 24,p0 = 0.127,p2_0 = 0.4,k = 4,tau = 9,omega1 = 24,omega2 = 19,kappa = 1.001144,theta = 4.36499,d = 10,eta_star = 0.95,lambda = 0.10,mu = 0,sigma = 10,a=1,b = 0.001, till = 6, to = 2, to2 = 3)
interim(n.cores = 3,rddata = 1,discrete = 1,data = 0,n = 43,n1 = 24,p0 = 0.127,p2_0 = 0.4,k = 4,tau = 9,omega1 = 24,omega2 = 19,kappa = 1.001144,theta = 4.36499,d = 10,eta_star = 0.95,lambda = 0.10,mu = 0,sigma = 10,a=1,b = 0.001, till = 6, to = 2, to2 = 3)
data = data.frame("e" = c(4,8,10,3.5,12.5,21), "y" = c(2,4,1000,1000,1000,1000), "y_e" = c(6,12,1010,1003.5,1012.5,1021),"delta" = c(1,1,0,0,0,0))
interim(n.cores = 3, rddata = 0, discrete = 1, data = data ,n = 43,n1 = 12,p0 = 0.127,p2_0 = 0.4,k = 4,tau = 9,omega1 = 24,omega2 = 19,kappa = 1.001144,theta = 4.36499,d = 10,eta_star = 0.95,lambda = 0.10,mu = 0,sigma = 10,a=1,b = 0.001, till = 6, to = 2, to2 = 3)
library(rstanPoS)
data = data.frame("e" = c(4,8,10,3.5,12.5,21), "y" = c(2,4,1000,1000,1000,1000), "y_e" = c(6,12,1010,1003.5,1012.5,1021),"delta" = c(1,1,0,0,0,0))
interim = interim(n.cores = 1, rddata = 0, discrete = 1, data = data ,n = 43,n1 = 12,p0 = 0.127,p2_0 = 0.4,k = 4,tau = 9,omega1 = 24,omega2 = 19,kappa = 1.001144,theta = 4.36499,d = 5,eta_star = 0.95,lambda = 0.10,mu = 0,sigma = 10,a=1,b = 0.001, till = 6, to = 2, to2 = 3)
library(rstanPoS)
interim = interim(n.cores = 1, rddata = 0, discrete = 1, data = data ,n = 43,n1 = 12,p0 = 0.127,p2_0 = 0.4,k = 4,tau = 9,omega1 = 24,omega2 = 19,kappa = 1.001144,theta = 4.36499,d = 5,eta_star = 0.95,lambda = 0.10,mu = 0,sigma = 10,a=1,b = 0.001, till = 6, to = 2, to2 = 3)
library(doParallel)
interim = interim(n.cores = 1, rddata = 0, discrete = 1, data = data ,n = 43,n1 = 12,p0 = 0.127,p2_0 = 0.4,k = 4,tau = 9,omega1 = 24,omega2 = 19,kappa = 1.001144,theta = 4.36499,d = 5,eta_star = 0.95,lambda = 0.10,mu = 0,sigma = 10,a=1,b = 0.001, till = 6, to = 2, to2 = 3)
print(interim)
interim(n.cores = 2,rddata = 1,discrete = 1,data = 0,n = 43,n1 = 24,p0 = 0.127,p2_0 = 0.4,k = 4,tau = 9,omega1 = 24,omega2 = 19,kappa = 1.001144,theta = 4.36499,d = 10,eta_star = 0.95,lambda = 0.10,mu = 0,sigma = 10,a=1,b = 0.001, till = 6, to = 2, to2 = 3)
print(interim)
secondstage_samples(data = data,n = 43,n1 = 24,tau = 9,omega2 = 19,kappa = 1.15,theta = 6.25,k = 4)
data_studyend2(data = data,tau = 9, till = 6, to = 2, to2 = 3)
final(rddata = 1, discrete = 1, interim = interim, data = 0,n = 43,n1 = 24,p0 = 0.127,p2_0 = 0.4,k = 4,tau = 9,omega2 = 19,kappa = 1.001144,theta = 4.36499,eta_star = 0.95,mu = 0,sigma = 10,a = 1,b = 0.001, till = 6, to = 2, to2 = 3)
d
d
interim
interim = interim(n.cores = 2, rddata = 1, discrete = 1,data = 0,n = 43,n1 = 24,p0 = 0.127,p2_0 = 0.4,k = 4,tau = 9,omega1 = 24,omega2 = 19,kappa = 1.001144,theta = 4.36499,d = 6,eta_star = 0.95,lambda = 0.10,mu = 0,sigma = 10,a=1,b = 0.001, till = 6, to = 2, to2 = 3)
final(rddata = 1, discrete = 1, interim = interim, data = 0,n = 43,n1 = 24,p0 = 0.127,p2_0 = 0.4,k = 4,tau = 9,omega2 = 19,kappa = 1.001144,theta = 4.36499,eta_star = 0.95,mu = 0,sigma = 10,a = 1,b = 0.001, till = 6, to = 2, to2 = 3)
print(final(rddata = 1, discrete = 1, interim = interim, data = 0,n = 43,n1 = 24,p0 = 0.127,p2_0 = 0.4,k = 4,tau = 9,omega2 = 19,kappa = 1.001144,theta = 4.36499,eta_star = 0.95,mu = 0,sigma = 10,a = 1,b = 0.001, till = 6, to = 2, to2 = 3)
)
git rev-parse --is-inside-work-tree
if git rev-parse --git-dir > /dev/null 2>&1; then
: # This is a valid git repository (but the current working
# directory may not be the top level.
# Check the output of the git rev-parse command if you care)
else
: # this is not a git repository
fi
inside_git_repo="$(git rev-parse --is-inside-work-tree 2>/dev/null)"
if [ "$inside_git_repo" ]; then
echo "inside git repo"
else
echo "not in git repo"
fi
