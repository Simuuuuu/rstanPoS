pred_theta <- c()
pred_kappa <- c()
success <- c()
for (k in 1:d) {
#ensures random gamma j is taken
random_index <- sample(x=length(sequence_theta), size=1)
#gives us the a,e,x,closs,z,y,delta for gammaj
prediction <- prediction_samples(dataSurv,n,n1,output_looktime$m1,tau,omega2,
sequence_kappa[random_index],
sequence_theta[random_index],k)
#combines observed and predicted data for each gamma j
output_studyend  <- data_studyend(dataSurv,prediction, tau, k)
#the list for rstan model
if(discrete == 0) {
survivaldata_studyend  <- list("ncens"=output_studyend$ncens,
"nevent"=output_studyend$nevent,
"y_studyend"=
as.array(output_studyend$y_studyend),
"z_studyend" =
as.array(output_studyend$z_studyend),"mu" = mu,
"sigma" = sigma, "a" = a, "b" = b)
}
else{survivaldata_studyend  <- list("ncens"=output_studyend$ncens,
"nevent"=output_studyend$nevent,
"y_studyend"=
as.array(output_studyend$y_studyend_round),
"z_studyend" =
as.array(output_studyend$z_studyend_round),"mu" = mu,
"sigma" = sigma, "a" = a, "b" = b)
}
#Estimation predictive posterior distribution
samples_studyend  <- rstan::sampling(survivalmodel_studyend,
data = survivaldata_studyend,
iter = 10000, chains = 4, cores = 6,
control = list(adapt_delta = 0.999))
#Extract Parameter Values
sequence_theta2 <- rstan::extract(samples_studyend,'theta')$theta
sequence_kappa2 <- rstan::extract(samples_studyend,'kappa')$kappa
#Get the quantile with which the 12months Posterior is reached -->Prob.
p0_calc <- 1 - pweibull(tau, shape = sequence_kappa2, scale = sequence_theta2)
pred_theta[k] <- c(median(sequence_theta2))
pred_kappa[k] <- c(median(sequence_kappa2))
#for each of the d predictions for a specific gammaj we look if the gamma
#j is greather than the gamma under the Alternative
prob[[k]] <- length(which(p0_calc > p0)) /
length(sequence_theta2)
if (prob[[k]] > eta_star) {success[k] <- 1} else {success[k] <- 0}
}
all_pred_theta <- data.frame(median(pred_theta),
quantile(pred_theta,0.05),
quantile(pred_theta,0.95))
all_pred_kappa <- data.frame(median(pred_kappa),
quantile(pred_kappa,0.05),
quantile(pred_kappa,0.95))
PoS <- sum(success)/d
if(PoS>lambda) {decision <- "Trial continues"} else{
decision <- "Stop for futility"}}
else {PoS <- "NONE, as there are no patients left w/o event"}
colnames(all_pred_theta) <- c("Median" , "5%_Quantile" , "95%_Quantile")
colnames(obs_theta) <- c("Median" , "5%_Quantile" , "95%_Quantile")
colnames(all_pred_kappa) <- c("Median" , "5%_Quantile" , "95%_Quantile")
colnames(obs_kappa) <- c("Median" , "5%_Quantile" , "95%_Quantile")
output <- list()
output$PoS <- PoS
output$decision <- decision
output$kappa <- kappa
output$theta <- theta
output$p0 <- p0
output$p2_0 <- p2_0
output$obs_kappa <- obs_kappa
output$obs_theta <- obs_theta
output$all_pred_kappa <- all_pred_kappa
output$all_pred_theta <- all_pred_theta
output$dataSurv <- dataSurv
#if(rddata == 1) {output$dataSurv <- dataSurv}
#define the S3 class
class(output) <- "interim"
print(output)
}
interim(rddata = 1,discrete = 1,data = 0,n = 43,n1 = 24,p0 = 0.127,p2_0 = 0.4,k = 4,tau = 9,omega1 = 24,omega2 = 19,kappa = 1.001144,theta = 4.36499,d = 100,eta_star = 0.95,lambda = 0.10,mu = 0,sigma = 10,a=1,b = 0.001)
interim <- function(rddata,discrete,data,n,n1,p0,p2_0,k,tau,omega1,omega2,kappa,theta,d,eta_star,lambda,mu,sigma,a,b) {
require(rstan)
PoS <- c()
decision <- c()
if(rddata == 1) {
#Data generated
dataSurv <- rdsamples_generator(n1,tau,k,omega1,kappa,theta)
}
else{dataSurv <- data
kappa <- find_weibull(tau, p0, k,
p2_0)$Shape
theta <- find_weibull(tau, p0, k,
p2_0)$Scale}
#Generate data only up to looktime
output_looktime <- data_looktime(dataSurv,k)
if (output_looktime$m1 > 0) {
#Make a list for Sampling
if(discrete == 0) {
survivaldata_looktime <- list("n1" = n1, "m1"=output_looktime$m1,
"n1event"=output_looktime$n1event,
"y_looktime"=
as.array(output_looktime$y_looktime),
"z_looktime" =
as.array(output_looktime$z_looktime), "mu" = mu,
"sigma" = sigma, "a" = a, "b" = b)
}
else{survivaldata_looktime <- list("n1" = n1, "m1"=output_looktime$m1,
"n1event"=output_looktime$n1event,
"y_looktime"=
as.array(output_looktime$y_looktime_round),
"z_looktime" =
as.array(output_looktime$z_looktime_round), "mu" = mu,
"sigma" = sigma, "a" = a, "b" = b)
}
#Sampling
samples_looktime <- rstan::sampling(survivalmodel_looktime,
data = survivaldata_looktime,
iter = 10000, chains = 4, cores = 6,
control = list(adapt_delta = 0.999))
#######Second Step#######
#Extract Parameter Values
sequence_theta <- rstan::extract(samples_looktime,'theta')$theta
sequence_kappa <- rstan::extract(samples_looktime,'kappa')$kappa
obs_theta <- data.frame(median(sequence_theta), quantile(sequence_theta,0.05),
quantile(sequence_theta,0.95))
obs_kappa <- data.frame(median(sequence_kappa), quantile(sequence_kappa,0.05),
quantile(sequence_kappa,0.95))
prob <- list()
pred_theta <- c()
pred_kappa <- c()
success <- c()
for (k in 1:d) {
#ensures random gamma j is taken
random_index <- sample(x=length(sequence_theta), size=1)
#gives us the a,e,x,closs,z,y,delta for gammaj
prediction <- prediction_samples(dataSurv,n,n1,output_looktime$m1,tau,omega2,
sequence_kappa[random_index],
sequence_theta[random_index],k)
#combines observed and predicted data for each gamma j
output_studyend  <- data_studyend(dataSurv,prediction, tau, k)
#the list for rstan model
if(discrete == 0) {
survivaldata_studyend  <- list("ncens"=output_studyend$ncens,
"nevent"=output_studyend$nevent,
"y_studyend"=
as.array(output_studyend$y_studyend),
"z_studyend" =
as.array(output_studyend$z_studyend),"mu" = mu,
"sigma" = sigma, "a" = a, "b" = b)
}
else{survivaldata_studyend  <- list("ncens"=output_studyend$ncens,
"nevent"=output_studyend$nevent,
"y_studyend"=
as.array(output_studyend$y_studyend_round),
"z_studyend" =
as.array(output_studyend$z_studyend_round),"mu" = mu,
"sigma" = sigma, "a" = a, "b" = b)
}
#Estimation predictive posterior distribution
samples_studyend  <- rstan::sampling(survivalmodel_studyend,
data = survivaldata_studyend,
iter = 10000, chains = 4, cores = 6,
control = list(adapt_delta = 0.999))
#Extract Parameter Values
sequence_theta2 <- rstan::extract(samples_studyend,'theta')$theta
sequence_kappa2 <- rstan::extract(samples_studyend,'kappa')$kappa
#Get the quantile with which the 12months Posterior is reached -->Prob.
p0_calc <- 1 - pweibull(tau, shape = sequence_kappa2, scale = sequence_theta2)
pred_theta[k] <- c(median(sequence_theta2))
pred_kappa[k] <- c(median(sequence_kappa2))
#for each of the d predictions for a specific gammaj we look if the gamma
#j is greather than the gamma under the Alternative
prob[[k]] <- length(which(p0_calc > p0)) /
length(sequence_theta2)
if (prob[[k]] > eta_star) {success[k] <- 1} else {success[k] <- 0}
}
all_pred_theta <- data.frame(median(pred_theta),
quantile(pred_theta,0.05),
quantile(pred_theta,0.95))
all_pred_kappa <- data.frame(median(pred_kappa),
quantile(pred_kappa,0.05),
quantile(pred_kappa,0.95))
PoS <- sum(success)/d
if(PoS>lambda) {decision <- "Trial continues"} else{
decision <- "Stop for futility"}}
else {PoS <- "NONE, as there are no patients left w/o event"}
colnames(all_pred_theta) <- c("Median" , "5%_Quantile" , "95%_Quantile")
colnames(obs_theta) <- c("Median" , "5%_Quantile" , "95%_Quantile")
colnames(all_pred_kappa) <- c("Median" , "5%_Quantile" , "95%_Quantile")
colnames(obs_kappa) <- c("Median" , "5%_Quantile" , "95%_Quantile")
output <- list()
output$PoS <- PoS
output$decision <- decision
output$kappa <- kappa
output$theta <- theta
output$p0 <- p0
output$p2_0 <- p2_0
output$obs_kappa <- obs_kappa
output$obs_theta <- obs_theta
output$all_pred_kappa <- all_pred_kappa
output$all_pred_theta <- all_pred_theta
output$dataSurv <- dataSurv
#if(rddata == 1) {output$dataSurv <- dataSurv}
#define the S3 class
class(output) <- "interim"
print(output)
}
interim(rddata = 1,discrete = 1,data = 0,n = 43,n1 = 24,p0 = 0.127,p2_0 = 0.4,k = 4,tau = 9,omega1 = 24,omega2 = 19,kappa = 1.001144,theta = 4.36499,d = 100,eta_star = 0.95,lambda = 0.10,mu = 0,sigma = 10,a=1,b = 0.001)
survivalmodel_looktime <- stan_model(model_code = smodel_looktime)
survivalmodel_studyend <- stan_model(model_code = smodel_studyend)
final <- function(rddata,discrete,interim,data,n,n1,p0,p2_0,k,tau,omega2,kappa,theta,eta_star,mu,sigma,a,b) {
PProb <- c()
decision <- c()
success <- c()
if(rddata == 1) {
dataSurv_first <- interim$dataSurv
#Data generated in the second stage
dataSurv_second <- secondstage_samples(dataSurv_first,n,n1,tau,omega2,kappa,theta,k)
dataSurv_total <- rbind(dataSurv_first,dataSurv_second)
}
else{dataSurv_total <- data}
output_studyend <- data_studyend2(dataSurv_total,tau)
#Make a list for Sampling
if(discrete == 0) {
survivaldata_studyend  <- list("ncens"=output_studyend$ncens,
"nevent"=output_studyend$nevent,
"y_studyend"=
as.array(output_studyend$y_studyend),
"z_studyend" =
as.array(output_studyend$z_studyend),"mu" = mu,
"sigma" = sigma, "a" = a, "b" = b)
}
else{survivaldata_studyend  <- list("ncens"=output_studyend$ncens,
"nevent"=output_studyend$nevent,
"y_studyend"=
as.array(output_studyend$y_studyend_round),
"z_studyend" =
as.array(output_studyend$z_studyend_round),"mu" = mu,
"sigma" = sigma, "a" = a, "b" = b)
}
#Sampling
samples_studyend <- rstan::sampling(survivalmodel_studyend,
data = survivaldata_studyend,
iter = 10000, chains = 4, cores = 6,
control = list(adapt_delta = 0.9999))
#Extract Parameter Values
sequence_theta <- rstan::extract(samples_studyend,'theta')$theta
sequence_kappa <- rstan::extract(samples_studyend,'kappa')$kappa
obs_theta <- data.frame(median(sequence_theta), quantile(sequence_theta,0.05),
quantile(sequence_theta,0.95))
obs_kappa <- data.frame(median(sequence_kappa), quantile(sequence_kappa,0.05),
quantile(sequence_kappa,0.95))
p0_calc <- 1 - pweibull(tau, shape = sequence_kappa, scale = sequence_theta)
PProb <- length(which(p0_calc > p0)) / length(sequence_theta)
if (PProb > eta_star) {success <- 1} else {success <- 0}
if(success == 1) {decision <- "Reject H0"} else{
decision <- "Do not reject H0"}
output <- list()
output$PProb <- PProb
output$decision <- decision
output$p0 <- p0
output$p2_0 <- p2_0
output$kappa <- kappa
output$theta <- theta
output$sampling <- samples_studyend
output$obs_kappa <- obs_kappa
output$obs_theta <- obs_theta
#define the S3 class
class(output) <- "final"
print(output)
}
print.interim <- function(x, ...) {
cat("\nResults:\n")
results <- data.frame(x$p0,
x$p2_0,
x$kappa,
x$theta,
x$PoS,
x$decision)
colnames(results) <- c("Ass. Survival Probability EP1", "Ass. Survival Probability EP2", "Ass. Shape", "Ass. Scale","PoS","Decision")
print(results)
cat("\nSummary of Posterior Values at looktime:\n")
rownames(x$obs_kappa) <- "Shape"
rownames(x$obs_theta) <- "Scale"
print(x$obs_kappa)
cat("\n")
print(x$obs_theta)
cat("\nSummary of Posterior Values at studyend:\n")
rownames(x$all_pred_kappa) <- "Shape"
rownames(x$all_pred_theta) <- "Scale"
print(x$all_pred_kappa)
cat("\n")
print(x$all_pred_theta)
invisible(x)
}
interim(rddata = 1,discrete = 1,data = 0,n = 43,n1 = 24,p0 = 0.127,p2_0 = 0.4,k = 4,tau = 9,omega1 = 24,omega2 = 19,kappa = 1.001144,theta = 4.36499,d = 100,eta_star = 0.95,lambda = 0.10,mu = 0,sigma = 10,a=1,b = 0.001)
Error in unserialize(socklist[[n]]) : error reading from connection
interim(rddata = 1,discrete = 1,data = 0,n = 43,n1 = 24,p0 = 0.127,p2_0 = 0.4,k = 4,tau = 9,omega1 = 24,omega2 = 19,kappa = 1.001144,theta = 4.36499,d = 100,eta_star = 0.95,lambda = 0.10,mu = 0,sigma = 10,a=1,b = 0.001)
interim <- function(rddata,discrete,data,n,n1,p0,p2_0,k,tau,omega1,omega2,kappa,theta,d,eta_star,lambda,mu,sigma,a,b) {
require(rstan)
PoS <- c()
decision <- c()
if(rddata == 1) {
#Data generated
dataSurv <- rdsamples_generator(n1,tau,k,omega1,kappa,theta)
}
else{dataSurv <- data
kappa <- find_weibull(tau, p0, k,
p2_0)$Shape
theta <- find_weibull(tau, p0, k,
p2_0)$Scale}
#Generate data only up to looktime
output_looktime <- data_looktime(dataSurv,k)
if (output_looktime$m1 > 0) {
#Make a list for Sampling
if(discrete == 0) {
survivaldata_looktime <- list("n1" = n1, "m1"=output_looktime$m1,
"n1event"=output_looktime$n1event,
"y_looktime"=
as.array(output_looktime$y_looktime),
"z_looktime" =
as.array(output_looktime$z_looktime), "mu" = mu,
"sigma" = sigma, "a" = a, "b" = b)
}
else{survivaldata_looktime <- list("n1" = n1, "m1"=output_looktime$m1,
"n1event"=output_looktime$n1event,
"y_looktime"=
as.array(output_looktime$y_looktime_round),
"z_looktime" =
as.array(output_looktime$z_looktime_round), "mu" = mu,
"sigma" = sigma, "a" = a, "b" = b)
}
#Sampling
samples_looktime <- rstan::sampling(survivalmodel_looktime,
data = survivaldata_looktime,
iter = 10000, chains = 4, cores = 6,
control = list(adapt_delta = 0.999))
#######Second Step#######
#Extract Parameter Values
sequence_theta <- rstan::extract(samples_looktime,'theta')$theta
sequence_kappa <- rstan::extract(samples_looktime,'kappa')$kappa
obs_theta <- data.frame(median(sequence_theta), quantile(sequence_theta,0.05),
quantile(sequence_theta,0.95))
obs_kappa <- data.frame(median(sequence_kappa), quantile(sequence_kappa,0.05),
quantile(sequence_kappa,0.95))
prob <- list()
pred_theta <- c()
pred_kappa <- c()
success <- c()
for (k in 1:d) {
#ensures random gamma j is taken
random_index <- sample(x=length(sequence_theta), size=1)
#gives us the a,e,x,closs,z,y,delta for gammaj
prediction <- prediction_samples(dataSurv,n,n1,output_looktime$m1,tau,omega2,
sequence_kappa[random_index],
sequence_theta[random_index],k)
#combines observed and predicted data for each gamma j
output_studyend  <- data_studyend(dataSurv,prediction, tau, k)
#the list for rstan model
if(discrete == 0) {
survivaldata_studyend  <- list("ncens"=output_studyend$ncens,
"nevent"=output_studyend$nevent,
"y_studyend"=
as.array(output_studyend$y_studyend),
"z_studyend" =
as.array(output_studyend$z_studyend),"mu" = mu,
"sigma" = sigma, "a" = a, "b" = b)
}
else{survivaldata_studyend  <- list("ncens"=output_studyend$ncens,
"nevent"=output_studyend$nevent,
"y_studyend"=
as.array(output_studyend$y_studyend_round),
"z_studyend" =
as.array(output_studyend$z_studyend_round),"mu" = mu,
"sigma" = sigma, "a" = a, "b" = b)
}
#Estimation predictive posterior distribution
samples_studyend  <- rstan::sampling(survivalmodel_studyend,
data = survivaldata_studyend,
iter = 10000, chains = 4, cores = 6,
control = list(adapt_delta = 0.999))
#Extract Parameter Values
sequence_theta2 <- rstan::extract(samples_studyend,'theta')$theta
sequence_kappa2 <- rstan::extract(samples_studyend,'kappa')$kappa
#Get the quantile with which the 12months Posterior is reached -->Prob.
p0_calc <- 1 - pweibull(tau, shape = sequence_kappa2, scale = sequence_theta2)
pred_theta[k] <- c(median(sequence_theta2))
pred_kappa[k] <- c(median(sequence_kappa2))
#for each of the d predictions for a specific gammaj we look if the gamma
#j is greather than the gamma under the Alternative
prob[[k]] <- length(which(p0_calc > p0)) /
length(sequence_theta2)
if (prob[[k]] > eta_star) {success[k] <- 1} else {success[k] <- 0}
}
all_pred_theta <- data.frame(median(pred_theta),
quantile(pred_theta,0.05),
quantile(pred_theta,0.95))
all_pred_kappa <- data.frame(median(pred_kappa),
quantile(pred_kappa,0.05),
quantile(pred_kappa,0.95))
PoS <- sum(success)/d
if(PoS>lambda) {decision <- "Trial continues"} else{
decision <- "Stop for futility"}}
else {PoS <- "NONE, as there are no patients left w/o event"}
colnames(all_pred_theta) <- c("Median" , "5%_Quantile" , "95%_Quantile")
colnames(obs_theta) <- c("Median" , "5%_Quantile" , "95%_Quantile")
colnames(all_pred_kappa) <- c("Median" , "5%_Quantile" , "95%_Quantile")
colnames(obs_kappa) <- c("Median" , "5%_Quantile" , "95%_Quantile")
output <- list()
output$PoS <- PoS
output$decision <- decision
output$kappa <- kappa
output$theta <- theta
output$p0 <- p0
output$p2_0 <- p2_0
output$obs_kappa <- obs_kappa
output$obs_theta <- obs_theta
output$all_pred_kappa <- all_pred_kappa
output$all_pred_theta <- all_pred_theta
output$dataSurv <- dataSurv
#if(rddata == 1) {output$dataSurv <- dataSurv}
#define the S3 class
class(output) <- "interim"
print(output)
}
print.interim <- function(x, ...) {
cat("\nResults:\n")
results <- data.frame(x$p0,
x$p2_0,
x$kappa,
x$theta,
x$PoS,
x$decision)
colnames(results) <- c("Ass. Survival Probability EP1", "Ass. Survival Probability EP2", "Ass. Shape", "Ass. Scale","PoS","Decision")
print(results)
cat("\nSummary of Posterior Values at looktime:\n")
rownames(x$obs_kappa) <- "Shape"
rownames(x$obs_theta) <- "Scale"
print(x$obs_kappa)
cat("\n")
print(x$obs_theta)
cat("\nSummary of Posterior Values at studyend:\n")
rownames(x$all_pred_kappa) <- "Shape"
rownames(x$all_pred_theta) <- "Scale"
print(x$all_pred_kappa)
cat("\n")
print(x$all_pred_theta)
invisible(x)
}
interim(rddata = 1,discrete = 1,data = 0,n = 43,n1 = 24,p0 = 0.127,p2_0 = 0.4,k = 4,tau = 9,omega1 = 24,omega2 = 19,kappa = 1.001144,theta = 4.36499,d = 100,eta_star = 0.95,lambda = 0.10,mu = 0,sigma = 10,a=1,b = 0.001)
rddata = 1
discrete = 1
data = 0
n = 43
n1 = 24
p0 = 0.127
p2_0 = 0.4
k = 4
tau = 9
omega1 = 24
omega2 = 19
kappa = 1.001144,
theta = 4.36499
d = 100
eta_star = 0.95
lambda = 0.10
mu = 0
sigma = 10
a=1
b = 0.001
PoS <- c()
decision <- c()
if(rddata == 1) {
#Data generated
dataSurv <- rdsamples_generator(n1,tau,k,omega1,kappa,theta)
}
rdsamples_generator(n1,tau,k,omega1,kappa,theta)
rdsamples_generator(n1 = 24,tau = 9,k = 2,omega1 = 24,kappa = 1.15,theta = 6.25)
n1
tau
k
omega1
kappa
kappa = 1.001144
theta = 4.36499
if(rddata == 1) {
#Data generated
dataSurv <- rdsamples_generator(n1,tau,k,omega1,kappa,theta)
}
dataSurv
output_looktime <- data_looktime(dataSurv,k)
output_looktime
survivaldata_looktime <- list("n1" = n1, "m1"=output_looktime$m1,
"n1event"=output_looktime$n1event,
"y_looktime"=
as.array(output_looktime$y_looktime),
"z_looktime" =
as.array(output_looktime$z_looktime), "mu" = mu,
"sigma" = sigma, "a" = a, "b" = b)
survivaldata_looktime
rstan::sampling(survivalmodel_looktime,
data = survivaldata_looktime,
iter = 10000, chains = 4, cores = 6,
control = list(adapt_delta = 0.999))
sampling(survivalmodel_looktime,
data = survivaldata_looktime,
iter = 10000, chains = 4, cores = 6,
control = list(adapt_delta = 0.999))
samples_looktime <- rstan::sampling(survivalmodel_looktime,
data = survivaldata_looktime,
iter = 10000, chains = 4, cores = 6,
control = list(adapt_delta = 0.999))
